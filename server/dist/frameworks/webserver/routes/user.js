"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const authService_1 = require("../../services/authService");
const authServiceInterface_1 = require("../../../application/services/authServiceInterface");
const userDBrepository_1 = require("../../../application/repository/userDBrepository");
const userRepoMongoDB_1 = require("../../database/mongodb/repositories/userRepoMongoDB");
const authController_1 = __importDefault(require("../../../adapters/controller/authController"));
const express_1 = __importDefault(require("express"));
const authenticationMiddleware_1 = __importDefault(require("../middlewares/authenticationMiddleware"));
const roleCheck_1 = require("../middlewares/roleCheck");
const googleServiceInterface_1 = require("../../../application/services/googleServiceInterface");
const googleAuthService_1 = require("../../services/googleAuthService");
const sentMailService_1 = require("../../services/sentMailService");
const sendMail_1 = require("../../../application/services/sendMail");
const authRouter = () => {
    const router = express_1.default.Router();
    const controller = (0, authController_1.default)(authServiceInterface_1.authServiceInterface, authService_1.authService, googleServiceInterface_1.googleAuthServiceInterface, googleAuthService_1.googleAuthService, userDBrepository_1.userDbRepository, userRepoMongoDB_1.userRepositoryMongoDB, sendMail_1.sentEmailServiceInterface, sentMailService_1.SendMailService);
    router.post('/user/signup', controller.userRegister);
    router.post('/user/login', controller.userLogin);
    router.get('/package-details/:id', controller.getPackage);
    router.get('/get-tour-packages', controller.getAllPackage);
    router.post('/book-package', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.bookPackage);
    router.post("/login-with-google", controller.loginWithGoogle);
    router.get('/user-profile', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.getUserDetails);
    router.put('/user-profile-update', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.userUpdateProfile);
    router.get('/user-get-package-booked-data/:id', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.getUserBookedDetails);
    router.get('/user-get-all-bookings', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.getAllBookings);
    router.post('/user-Pay-status-change', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.paymentStatusChange);
    router.get('/user-get-alert-messages', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.getAlertMsg);
    router.post('/user-create-community', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.createCommnuity);
    router.get('/get-all-community', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.getAllCommunity);
    router.post('/join-community', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.joinCommunity);
    router.get('/getAlluserJoinedAndNotJoinedcommunity', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.getAllJoinedAndNotJoinedCommunity);
    router.post('/create-conversation', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.createConversation);
    router.get('/get-all-coversation/:id', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.getAllConversation);
    router.get('/get-all-unique-category', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.getAllUniqueCategory);
    router.post('/user-password-update', authenticationMiddleware_1.default, roleCheck_1.userRoleCheckMiddleware, controller.userUpdatePassword);
    router.post('/user-generate-otp', controller.generateOTPtoEmail);
    router.post('/verify-otp', controller.verifyOTP);
    router.post('/user-password-update-withEmail', controller.updatePasswordWithEmail);
    return router;
};
exports.default = authRouter;
