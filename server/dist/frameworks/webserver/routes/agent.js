"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const authService_1 = require("../../services/authService");
const authServiceInterface_1 = require("../../../application/services/authServiceInterface");
const agentDBrepository_1 = require("../../../application/repository/agentDBrepository");
const agentRepoMongoDB_1 = require("../../database/mongodb/repositories/agentRepoMongoDB");
const agentController_1 = __importDefault(require("../../../adapters/controller/agentController"));
const express_1 = __importDefault(require("express"));
const cloudinary_1 = require("../middlewares/cloudinary");
const authenticationMiddleware_1 = __importDefault(require("../middlewares/authenticationMiddleware"));
const roleCheck_1 = require("../middlewares/roleCheck");
const agentRouter = () => {
    const router = express_1.default.Router();
    const controller = (0, agentController_1.default)(authServiceInterface_1.authServiceInterface, authService_1.authService, agentDBrepository_1.agentDbRepository, agentRepoMongoDB_1.agentRepositoryMongoDB);
    router.post("/signup", cloudinary_1.upload, controller.agentRegister);
    router.post("/login", controller.agentLogin);
    router.post("/category-add", authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.addCategory);
    router.get("/get-all-category", authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.getCategory);
    router.patch("/delete-category", authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.deleteCategory);
    router.post("/add-tour-package", authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, cloudinary_1.upload, controller.addPackage);
    router.get("/get-all-package/", authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.getAllPackages);
    router.get("/get-package/:id", authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.getPackage);
    router.patch("/disable-package/:id", authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.disablePackage);
    router.put("/update-package/:id", authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, cloudinary_1.upload, controller.updatePackage);
    router.put("/delete-package/:id", authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.deletePackage);
    router.get('/get-all-booking', authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.agentGetAllBooking);
    router.get('/isVerified', authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.checkAgentVerified);
    router.get('/get-profile', authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.getAgentProfile);
    router.put('/agent-profile-update', authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.agentProfileUpdate);
    router.post('/alert-message', authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.paymentAlertMessage);
    router.get('/get-all-bookingStat', authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.getAgentBookingStat);
    router.get('/get-agent-revenue', authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.getRevenue);
    router.get('/get-userCount-successBookingCount', authenticationMiddleware_1.default, roleCheck_1.agentRoleCheckMiddleware, controller.getUserCountAndBookingCount);
    return router;
};
exports.default = agentRouter;
